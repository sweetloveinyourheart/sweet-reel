name: CI Environment - Reusable Workflow

on:
  workflow_call:
     inputs:
      job-name:
        description: 'The name of the job that will be executed.  This name should be unique within the context of any given workflow'
        required: true
        type: string
      
      command-to-execute:
        description: 'The command (or set of commands) that will be executed for this job'
        required: true
        type: string

      run-location:
        description: 'This is the runner that will be used for this job (ubuntu-latest, ubuntu-latest-large, self-hosted, etc)'
        required: false
        type: string
        default: ubuntu-latest

      timeout:
        description: 'This is the timeout for this job (in minutes)'
        required: false
        type: number
        default: 20

      use-build-cache:
        description: 'This indicates whether or not to restore the go/docker builds cache for in this job'
        required: false
        type: boolean

      retry-on-failure:
        description: 'This indicates whether or not to retry (once) the command(s)-to-execute if it/they fail.  Note that the command(s) must be idempotent for this to work properly.  Also, the failure must be captured in an `errorCode` variable, rather than letting (set -e) fail-fast.'
        required: false
        type: boolean
        default: false

      pull-previous-logs:
        description: 'This indicates whether or not to pull the `tests/logs` directory from previous stages'
        required: false
        type: boolean
        default: false

jobs:
  run:
    timeout-minutes: ${{ inputs.timeout }}

    runs-on: ${{ inputs.run-location }}

    env:
      CI: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Workflow execution environment
        run: |
          echo ${{ inputs.run-location }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache-dependency-path: go.sum
          cache: false

      - name: Restore cache
        if: ${{ inputs.use-build-cache }}
        timeout-minutes: 5
        continue-on-error: true
        uses: actions/cache/restore@v4
        with:
          path: |
            .gobincache
            /tmp/.buildx-cache
            /tmp/.deps
            ~/.cache/go-build
            ~/go
          key: ${{ runner.os }}-other-${{ github.ref_name }}-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-other-${{ github.ref_name }}-
            ${{ runner.os }}-other-main-
            ${{ runner.os }}-other-
            ${{ runner.os }}-other

      - name: Download Any Logs From Previous Stages
        if: ${{ inputs.pull-previous-logs }}
        continue-on-error: false
        uses: Wandalen/wretry.action@master
        with:
          action: actions/download-artifact@v4
          with: |
            pattern: Logs*
            path: tests/logs
            merge-multiple: true

      - name: Run
        run: | 
          errorCode=0
          for i in {0..0}; do
            # Since we 'set -e', any failure in here will case this 
            # action to fail-fast, unless we catch it and retry
            ${{ inputs.command-to-execute }}  
          done

          # if errorCode is not 0, and retry-on-failure is true, then retry
          if [ $errorCode -ne 0 ] && ${{ inputs.retry-on-failure }}; then
            errorCode=0
            echo -e "\n###\n### RETRYING THIS ACTION\n###\n$"   
            mkdir -p tests/flakyTests
            mv tests/logs/ tests/flakyTests
            mkdir -p tests/logs
            for i in {0..0}; do
              ${{ inputs.command-to-execute }}  # Try again in case of networking hiccup, fail otherwise
            done 
            if [ $errorCode -ne 0 ]; then
              exit $errorCode
            fi
            mv tests/flakyTests tests/logs
            echo "::warning title=Step passed after retrying::Failed on first attempt, but passed on retry. Any logs from flaky tests will be in the 'flakyTests' directory (see artifacts)"
          fi

          exit $errorCode

      - name: Record logs
        if: always()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: Logs-${{ inputs.job-name }}
          path: |
            tests/logs
          if-no-files-found: ignore
          compression-level: 1