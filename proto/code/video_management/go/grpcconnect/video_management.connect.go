// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: video_management.proto

package grpcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/sweetloveinyourheart/sweet-reel/proto/code/video_management/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// VideoManagementName is the fully-qualified name of the VideoManagement service.
	VideoManagementName = "com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// VideoManagementPresignedUrlProcedure is the fully-qualified name of the VideoManagement's
	// PresignedUrl RPC.
	VideoManagementPresignedUrlProcedure = "/com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement/PresignedUrl"
	// VideoManagementGetChannelVideosProcedure is the fully-qualified name of the VideoManagement's
	// GetChannelVideos RPC.
	VideoManagementGetChannelVideosProcedure = "/com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement/GetChannelVideos"
)

// VideoManagementClient is a client for the
// com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement service.
type VideoManagementClient interface {
	PresignedUrl(context.Context, *connect.Request[_go.PresignedUrlRequest]) (*connect.Response[_go.PresignedUrlResponse], error)
	GetChannelVideos(context.Context, *connect.Request[_go.GetChannelVideosRequest]) (*connect.Response[_go.GetChannelVideosResponse], error)
}

// NewVideoManagementClient constructs a client for the
// com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewVideoManagementClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) VideoManagementClient {
	baseURL = strings.TrimRight(baseURL, "/")
	videoManagementMethods := _go.File_video_management_proto.Services().ByName("VideoManagement").Methods()
	return &videoManagementClient{
		presignedUrl: connect.NewClient[_go.PresignedUrlRequest, _go.PresignedUrlResponse](
			httpClient,
			baseURL+VideoManagementPresignedUrlProcedure,
			connect.WithSchema(videoManagementMethods.ByName("PresignedUrl")),
			connect.WithClientOptions(opts...),
		),
		getChannelVideos: connect.NewClient[_go.GetChannelVideosRequest, _go.GetChannelVideosResponse](
			httpClient,
			baseURL+VideoManagementGetChannelVideosProcedure,
			connect.WithSchema(videoManagementMethods.ByName("GetChannelVideos")),
			connect.WithClientOptions(opts...),
		),
	}
}

// videoManagementClient implements VideoManagementClient.
type videoManagementClient struct {
	presignedUrl     *connect.Client[_go.PresignedUrlRequest, _go.PresignedUrlResponse]
	getChannelVideos *connect.Client[_go.GetChannelVideosRequest, _go.GetChannelVideosResponse]
}

// PresignedUrl calls
// com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement.PresignedUrl.
func (c *videoManagementClient) PresignedUrl(ctx context.Context, req *connect.Request[_go.PresignedUrlRequest]) (*connect.Response[_go.PresignedUrlResponse], error) {
	return c.presignedUrl.CallUnary(ctx, req)
}

// GetChannelVideos calls
// com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement.GetChannelVideos.
func (c *videoManagementClient) GetChannelVideos(ctx context.Context, req *connect.Request[_go.GetChannelVideosRequest]) (*connect.Response[_go.GetChannelVideosResponse], error) {
	return c.getChannelVideos.CallUnary(ctx, req)
}

// VideoManagementHandler is an implementation of the
// com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement service.
type VideoManagementHandler interface {
	PresignedUrl(context.Context, *connect.Request[_go.PresignedUrlRequest]) (*connect.Response[_go.PresignedUrlResponse], error)
	GetChannelVideos(context.Context, *connect.Request[_go.GetChannelVideosRequest]) (*connect.Response[_go.GetChannelVideosResponse], error)
}

// NewVideoManagementHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewVideoManagementHandler(svc VideoManagementHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	videoManagementMethods := _go.File_video_management_proto.Services().ByName("VideoManagement").Methods()
	videoManagementPresignedUrlHandler := connect.NewUnaryHandler(
		VideoManagementPresignedUrlProcedure,
		svc.PresignedUrl,
		connect.WithSchema(videoManagementMethods.ByName("PresignedUrl")),
		connect.WithHandlerOptions(opts...),
	)
	videoManagementGetChannelVideosHandler := connect.NewUnaryHandler(
		VideoManagementGetChannelVideosProcedure,
		svc.GetChannelVideos,
		connect.WithSchema(videoManagementMethods.ByName("GetChannelVideos")),
		connect.WithHandlerOptions(opts...),
	)
	return "/com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case VideoManagementPresignedUrlProcedure:
			videoManagementPresignedUrlHandler.ServeHTTP(w, r)
		case VideoManagementGetChannelVideosProcedure:
			videoManagementGetChannelVideosHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedVideoManagementHandler returns CodeUnimplemented from all methods.
type UnimplementedVideoManagementHandler struct{}

func (UnimplementedVideoManagementHandler) PresignedUrl(context.Context, *connect.Request[_go.PresignedUrlRequest]) (*connect.Response[_go.PresignedUrlResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement.PresignedUrl is not implemented"))
}

func (UnimplementedVideoManagementHandler) GetChannelVideos(context.Context, *connect.Request[_go.GetChannelVideosRequest]) (*connect.Response[_go.GetChannelVideosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement.GetChannelVideos is not implemented"))
}
