// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: video_management.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VideoManagement_PresignedUrl_FullMethodName = "/com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement/PresignedUrl"
)

// VideoManagementClient is the client API for VideoManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoManagementClient interface {
	PresignedUrl(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PresignedUrlResponse, error)
}

type videoManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoManagementClient(cc grpc.ClientConnInterface) VideoManagementClient {
	return &videoManagementClient{cc}
}

func (c *videoManagementClient) PresignedUrl(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PresignedUrlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PresignedUrlResponse)
	err := c.cc.Invoke(ctx, VideoManagement_PresignedUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoManagementServer is the server API for VideoManagement service.
// All implementations should embed UnimplementedVideoManagementServer
// for forward compatibility.
type VideoManagementServer interface {
	PresignedUrl(context.Context, *emptypb.Empty) (*PresignedUrlResponse, error)
}

// UnimplementedVideoManagementServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVideoManagementServer struct{}

func (UnimplementedVideoManagementServer) PresignedUrl(context.Context, *emptypb.Empty) (*PresignedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresignedUrl not implemented")
}
func (UnimplementedVideoManagementServer) testEmbeddedByValue() {}

// UnsafeVideoManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoManagementServer will
// result in compilation errors.
type UnsafeVideoManagementServer interface {
	mustEmbedUnimplementedVideoManagementServer()
}

func RegisterVideoManagementServer(s grpc.ServiceRegistrar, srv VideoManagementServer) {
	// If the following call pancis, it indicates UnimplementedVideoManagementServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VideoManagement_ServiceDesc, srv)
}

func _VideoManagement_PresignedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoManagementServer).PresignedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoManagement_PresignedUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoManagementServer).PresignedUrl(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoManagement_ServiceDesc is the grpc.ServiceDesc for VideoManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.sweetloveinyourheart.srl.videomanagement.dataproviders.VideoManagement",
	HandlerType: (*VideoManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PresignedUrl",
			Handler:    _VideoManagement_PresignedUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "video_management.proto",
}
