// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user.proto

package grpcconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	_go "github.com/sweetloveinyourheart/sweet-reel/proto/code/user/go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "com.sweetloveinyourheart.srl.user.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceUpsertOAuthUserProcedure is the fully-qualified name of the UserService's
	// UpsertOAuthUser RPC.
	UserServiceUpsertOAuthUserProcedure = "/com.sweetloveinyourheart.srl.user.UserService/UpsertOAuthUser"
	// UserServiceGetUserByIDProcedure is the fully-qualified name of the UserService's GetUserByID RPC.
	UserServiceGetUserByIDProcedure = "/com.sweetloveinyourheart.srl.user.UserService/GetUserByID"
	// UserServiceGetChannelByUserProcedure is the fully-qualified name of the UserService's
	// GetChannelByUser RPC.
	UserServiceGetChannelByUserProcedure = "/com.sweetloveinyourheart.srl.user.UserService/GetChannelByUser"
	// UserServiceGetChannelByHandleProcedure is the fully-qualified name of the UserService's
	// GetChannelByHandle RPC.
	UserServiceGetChannelByHandleProcedure = "/com.sweetloveinyourheart.srl.user.UserService/GetChannelByHandle"
)

// UserServiceClient is a client for the com.sweetloveinyourheart.srl.user.UserService service.
type UserServiceClient interface {
	// Called by AuthService after verifying an OAuth provider token.
	UpsertOAuthUser(context.Context, *connect.Request[_go.UpsertOAuthUserRequest]) (*connect.Response[_go.UpsertOAuthUserResponse], error)
	// Fetch user info by ID (used internally by other services).
	GetUserByID(context.Context, *connect.Request[_go.GetUserByIDRequest]) (*connect.Response[_go.GetUserByIDResponse], error)
	// Fetch channel info by user.
	GetChannelByUser(context.Context, *connect.Request[_go.GetChannelByUserRequest]) (*connect.Response[_go.GetChannelByUserResponse], error)
	// Fetch channel info by handle (e.g., @username).
	GetChannelByHandle(context.Context, *connect.Request[_go.GetChannelByHandleRequest]) (*connect.Response[_go.GetChannelByHandleResponse], error)
}

// NewUserServiceClient constructs a client for the com.sweetloveinyourheart.srl.user.UserService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := _go.File_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		upsertOAuthUser: connect.NewClient[_go.UpsertOAuthUserRequest, _go.UpsertOAuthUserResponse](
			httpClient,
			baseURL+UserServiceUpsertOAuthUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpsertOAuthUser")),
			connect.WithClientOptions(opts...),
		),
		getUserByID: connect.NewClient[_go.GetUserByIDRequest, _go.GetUserByIDResponse](
			httpClient,
			baseURL+UserServiceGetUserByIDProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserByID")),
			connect.WithClientOptions(opts...),
		),
		getChannelByUser: connect.NewClient[_go.GetChannelByUserRequest, _go.GetChannelByUserResponse](
			httpClient,
			baseURL+UserServiceGetChannelByUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetChannelByUser")),
			connect.WithClientOptions(opts...),
		),
		getChannelByHandle: connect.NewClient[_go.GetChannelByHandleRequest, _go.GetChannelByHandleResponse](
			httpClient,
			baseURL+UserServiceGetChannelByHandleProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetChannelByHandle")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	upsertOAuthUser    *connect.Client[_go.UpsertOAuthUserRequest, _go.UpsertOAuthUserResponse]
	getUserByID        *connect.Client[_go.GetUserByIDRequest, _go.GetUserByIDResponse]
	getChannelByUser   *connect.Client[_go.GetChannelByUserRequest, _go.GetChannelByUserResponse]
	getChannelByHandle *connect.Client[_go.GetChannelByHandleRequest, _go.GetChannelByHandleResponse]
}

// UpsertOAuthUser calls com.sweetloveinyourheart.srl.user.UserService.UpsertOAuthUser.
func (c *userServiceClient) UpsertOAuthUser(ctx context.Context, req *connect.Request[_go.UpsertOAuthUserRequest]) (*connect.Response[_go.UpsertOAuthUserResponse], error) {
	return c.upsertOAuthUser.CallUnary(ctx, req)
}

// GetUserByID calls com.sweetloveinyourheart.srl.user.UserService.GetUserByID.
func (c *userServiceClient) GetUserByID(ctx context.Context, req *connect.Request[_go.GetUserByIDRequest]) (*connect.Response[_go.GetUserByIDResponse], error) {
	return c.getUserByID.CallUnary(ctx, req)
}

// GetChannelByUser calls com.sweetloveinyourheart.srl.user.UserService.GetChannelByUser.
func (c *userServiceClient) GetChannelByUser(ctx context.Context, req *connect.Request[_go.GetChannelByUserRequest]) (*connect.Response[_go.GetChannelByUserResponse], error) {
	return c.getChannelByUser.CallUnary(ctx, req)
}

// GetChannelByHandle calls com.sweetloveinyourheart.srl.user.UserService.GetChannelByHandle.
func (c *userServiceClient) GetChannelByHandle(ctx context.Context, req *connect.Request[_go.GetChannelByHandleRequest]) (*connect.Response[_go.GetChannelByHandleResponse], error) {
	return c.getChannelByHandle.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the com.sweetloveinyourheart.srl.user.UserService
// service.
type UserServiceHandler interface {
	// Called by AuthService after verifying an OAuth provider token.
	UpsertOAuthUser(context.Context, *connect.Request[_go.UpsertOAuthUserRequest]) (*connect.Response[_go.UpsertOAuthUserResponse], error)
	// Fetch user info by ID (used internally by other services).
	GetUserByID(context.Context, *connect.Request[_go.GetUserByIDRequest]) (*connect.Response[_go.GetUserByIDResponse], error)
	// Fetch channel info by user.
	GetChannelByUser(context.Context, *connect.Request[_go.GetChannelByUserRequest]) (*connect.Response[_go.GetChannelByUserResponse], error)
	// Fetch channel info by handle (e.g., @username).
	GetChannelByHandle(context.Context, *connect.Request[_go.GetChannelByHandleRequest]) (*connect.Response[_go.GetChannelByHandleResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := _go.File_user_proto.Services().ByName("UserService").Methods()
	userServiceUpsertOAuthUserHandler := connect.NewUnaryHandler(
		UserServiceUpsertOAuthUserProcedure,
		svc.UpsertOAuthUser,
		connect.WithSchema(userServiceMethods.ByName("UpsertOAuthUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserByIDHandler := connect.NewUnaryHandler(
		UserServiceGetUserByIDProcedure,
		svc.GetUserByID,
		connect.WithSchema(userServiceMethods.ByName("GetUserByID")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetChannelByUserHandler := connect.NewUnaryHandler(
		UserServiceGetChannelByUserProcedure,
		svc.GetChannelByUser,
		connect.WithSchema(userServiceMethods.ByName("GetChannelByUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetChannelByHandleHandler := connect.NewUnaryHandler(
		UserServiceGetChannelByHandleProcedure,
		svc.GetChannelByHandle,
		connect.WithSchema(userServiceMethods.ByName("GetChannelByHandle")),
		connect.WithHandlerOptions(opts...),
	)
	return "/com.sweetloveinyourheart.srl.user.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceUpsertOAuthUserProcedure:
			userServiceUpsertOAuthUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserByIDProcedure:
			userServiceGetUserByIDHandler.ServeHTTP(w, r)
		case UserServiceGetChannelByUserProcedure:
			userServiceGetChannelByUserHandler.ServeHTTP(w, r)
		case UserServiceGetChannelByHandleProcedure:
			userServiceGetChannelByHandleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) UpsertOAuthUser(context.Context, *connect.Request[_go.UpsertOAuthUserRequest]) (*connect.Response[_go.UpsertOAuthUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.srl.user.UserService.UpsertOAuthUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserByID(context.Context, *connect.Request[_go.GetUserByIDRequest]) (*connect.Response[_go.GetUserByIDResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.srl.user.UserService.GetUserByID is not implemented"))
}

func (UnimplementedUserServiceHandler) GetChannelByUser(context.Context, *connect.Request[_go.GetChannelByUserRequest]) (*connect.Response[_go.GetChannelByUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.srl.user.UserService.GetChannelByUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetChannelByHandle(context.Context, *connect.Request[_go.GetChannelByHandleRequest]) (*connect.Response[_go.GetChannelByHandleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("com.sweetloveinyourheart.srl.user.UserService.GetChannelByHandle is not implemented"))
}
